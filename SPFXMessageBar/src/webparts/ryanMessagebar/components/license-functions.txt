
  checkLicenseActive = () => {
    const tenantUrl = this.props.siteCollectionUrl.split("/")[2];
    const getObject = theObject => {
      var result = null;
      if (theObject instanceof Array) {
        for (var i = 0; i < theObject.length; i++) {
          result = getObject(theObject[i]);
          if (result) {
            break;
          }
        }
      } else {
        for (var prop in theObject) {
          prop + ": " + theObject[prop];
          if (prop == "tenant") {
            if (theObject[prop] == tenantUrl) {
              return theObject;
            }
          }
          if (
            theObject[prop] instanceof Object ||
            theObject[prop] instanceof Array
          ) {
            result = getObject(theObject[prop]);
            if (result) {
              break;
            }
          }
        }
      }

      return result;
    };
    axios
      .get(`/tenants.json`)
      .then(res => {
        let targetObj = getObject(res.data);
        this.setState({ isLicenseActive: targetObj.isLicenseActive });
      })
      .catch(error => console.log(error));
  };

  generateDemoData = () => {
    //? ONLY FOR GENERATING DEMO DATA FOR PS1 FILES
    this.state.spListData.map(data =>
      console.log(
        `Add-PnPListItem -List "MessagebarList" -Values @{
            "Title" =  "${data.title}"; 
            "desc"=" ${data.desc}";
            "icon"=" ${data.icon}";
          }`
      )
    );
  };

  public componentDidMount() {
    //? INITIAL FETCHING OF DATA INTO COMPONENT STATE
    this.checkLicenseActive();
    this.getDataFromSPListDb().then(listFromSPDb => {
      this.setState({ spListData: listFromSPDb });
    });
  }

  //? DYNAMIC UPDATING OF DATA INTO COMPONENT STATE EVERY 5 SECONDS
  public componentWillMount() {
    setInterval(() => this.checkLicenseActive(), 7000);
    setInterval(
      () =>
        this.getDataFromSPListDb().then(listFromSPDb => {
          this.setState({ spListData: listFromSPDb });
        }),
      5000
    );
  }

    public render(): React.ReactElement<IRyanMessagebarProps> {
    return (
      <React.Fragment>
        {this.state.isLicenseActive === "true" ? (
          <MessageCarousel data={this.state.spListData} />
        ) : (
          <Message negative>
            <Message.Header>
              We're sorry your SRKK tenant account has been deactivated.
            </Message.Header>
            <p>Your license has expired.</p>
          </Message>
        )}
      </React.Fragment>
    );
  }

  2. change state (isLicenseActive: 'true') and state schema to strong